(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{pq4H:function(e,t,n){"use strict";n.r(t);n("q1tI");var a=n("soUV"),l=n("vrFN"),r=n("GE6y"),o=n("nuHR");var i="import numpy\n\n\ndef gradient_descent(\n    grad: Callable[numpy.ndarray, numpy.ndarray], alpha: float, x: numpy.ndarray\n) -> numpy.ndarray:\n    pass\n";var b="import numpy\n\n\ndef gradient_descent(\n    grad: Callable[numpy.ndarray, numpy.ndarray], alpha: float, x: numpy.ndarray\n) -> numpy.ndarray:\n    delta = numpy.ones_like(x)\n    while numpy.linalg.norm(delta) >= 0.0001:\n        delta = alpha * grad(x)\n        x -= delta\n    return x\n",u=n("Wbzz"),p=n("qKvR");t.default=()=>Object(p.b)(a.a,null,Object(p.b)(l.a,{title:"Fundamentals: Problem Set"}),Object(p.b)("h1",null,"Fundamentals: Problem Set"),Object(p.b)("p",null,"In this problem set, we'll investigate extending perceptrons to work with arbitrary input shapes. In the text, ",Object(p.b)(r.a,{tex:"a"})," and"," ",Object(p.b)(r.a,{tex:"b"})," were confined to floats and the ",Object(p.b)(r.a,{tex:"RSS"})," ","involved a sum, but when operating in vector space, this sum can be removed."),Object(p.b)("p",{style:{backgroundColor:"#EEE",padding:"16px"}},"These problem sets are expected to take substantially more time than the text itself. If it helps, copy the code to your favorite editor and work on the problem from there. Click the Export button to export the tests for evaluation on your own computer."),Object(p.b)("hr",null),Object(p.b)("p",null,"Problem 1. Update gradient descent to work with ",Object(p.b)("em",null,"n"),"-dimensional inputs. The function now takes a ",Object(p.b)("code",null,"numpy.ndarray")," and should return a ",Object(p.b)("code",null,"numpy.ndarray")," where the local minimum is."),Object(p.b)(o.a,{hiddenContent:"",initialContent:i,solution:b,evaluations:[]}),Object(p.b)("hr",null),Object(p.b)("p",null,"Problem 2. Update a perceptron to work with a matrix of weights. A single perceptron may output a dimension different from its input."),Object(p.b)("p",null,"PLACEHOLDER"),Object(p.b)("hr",null),Object(p.b)("p",null,"Problem 3. Using this ",Object(p.b)("em",null,"n"),"-dimensional perceptron, write a classifier for the"," ",Object(p.b)("a",{href:"http://archive.ics.uci.edu/ml/datasets/Wine+Quality",target:"_blank"},"Wine Quality")," ","dataset. The basic scaffolding has been provided for you to read the data. Chain together multiple ",Object(p.b)("em",null,"n"),"-dimensional perceptrons to output a single score predicting the wine quality. Find a configuration of perceptrons that results in at least a 95% accuracy."),Object(p.b)("p",null,"PLACEHOLDER"),Object(p.b)("div",null,Object(p.b)("ul",null,Object(p.b)("li",null,Object(p.b)(u.Link,{to:"/fundamentals/perceptrons/"},"Continue to Perceptrons")),Object(p.b)("li",null,Object(p.b)(u.Link,{to:"/"},"Go back to the table of contents")))))}}]);
//# sourceMappingURL=component---src-pages-fundamentals-problem-set-index-tsx-5d4a2cc429890fc14981.js.map