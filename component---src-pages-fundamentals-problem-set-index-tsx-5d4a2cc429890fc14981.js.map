{"version":3,"sources":["webpack:///./src/python/fundamentals/problem-set/problems/index.ts","webpack:///./src/python/fundamentals/problem-set/solutions/index.ts","webpack:///./src/pages/fundamentals/problem-set/index.tsx"],"names":["Layout","title","MathJax","tex","style","backgroundColor","padding","Python","hiddenContent","initialContent","problems","solution","solutions","evaluations","href","target","to"],"mappings":"iKAEe,M,6JCAA,M,6TCQA,cACb,YAACA,EAAA,EAAD,KACE,YAAC,IAAD,CAAKC,MAAM,8BACX,mDACA,uIAEuC,YAACC,EAAA,EAAD,CAASC,IAAI,MAFpD,OAE+D,IAC7D,YAACD,EAAA,EAAD,CAASC,IAAI,MAHf,oCAGsD,YAACD,EAAA,EAAD,CAASC,IAAI,QAAS,IAH5E,gFAOA,iBACEC,MAAO,CACLC,gBAAiB,OACjBC,QAAS,SAHb,iQAWA,uBACA,wEACkD,2BADlD,iDAEmC,yCAFnC,wBAGW,yCAHX,gCAKA,YAACC,EAAA,EAAD,CACEC,cAAc,GACdC,eAAgBC,EAChBC,SAAUC,EACVC,YAAa,KAEf,uBACA,8JAIA,oCACA,uBACA,8CACwB,2BADxB,sDAEqB,IACnB,iBACEC,KAAK,sDACLC,OAAO,UAFT,gBAKK,IARP,sGAU0B,2BAV1B,+JAcA,oCACA,uBACE,sBACE,sBACE,YAAC,OAAD,CAAMC,GAAG,8BAAT,4BAEF,sBACE,YAAC,OAAD,CAAMA,GAAG,KAAT","file":"component---src-pages-fundamentals-problem-set-index-tsx-5d4a2cc429890fc14981.js","sourcesContent":["import { a } from \"./a.py\";\n\nexport default { a };\n","import { a } from \"./a.py\";\n\nexport default { a };\n","import React from \"react\";\n\nimport Layout from \"../../../components/Layout\";\nimport SEO from \"../../../components/seo\";\nimport MathJax from \"../../../components/MathJax\";\nimport Python from \"../../../components/Python\";\nimport problems from \"../../../python/fundamentals/problem-set/problems\";\nimport solutions from \"../../../python/fundamentals/problem-set/solutions\";\nimport { Link } from \"gatsby\";\n\nexport default () => (\n  <Layout>\n    <SEO title=\"Fundamentals: Problem Set\" />\n    <h1>Fundamentals: Problem Set</h1>\n    <p>\n      In this problem set, we'll investigate extending perceptrons to work with\n      arbitrary input shapes. In the text, <MathJax tex=\"a\" /> and{\" \"}\n      <MathJax tex=\"b\" /> were confined to floats and the <MathJax tex=\"RSS\" />{\" \"}\n      involved a sum, but when operating in vector space, this sum can be\n      removed.\n    </p>\n    <p\n      style={{\n        backgroundColor: \"#EEE\",\n        padding: \"16px\",\n      }}\n    >\n      These problem sets are expected to take substantially more time than the\n      text itself. If it helps, copy the code to your favorite editor and work\n      on the problem from there. Click the Export button to export the tests for\n      evaluation on your own computer.\n    </p>\n    <hr />\n    <p>\n      Problem 1. Update gradient descent to work with <em>n</em>-dimensional\n      inputs. The function now takes a <code>numpy.ndarray</code> and should\n      return a <code>numpy.ndarray</code> where the local minimum is.\n    </p>\n    <Python\n      hiddenContent=\"\"\n      initialContent={problems.a}\n      solution={solutions.a}\n      evaluations={[]}\n    />\n    <hr />\n    <p>\n      Problem 2. Update a perceptron to work with a matrix of weights. A single\n      perceptron may output a dimension different from its input.\n    </p>\n    <p>PLACEHOLDER</p>\n    <hr />\n    <p>\n      Problem 3. Using this <em>n</em>-dimensional perceptron, write a\n      classifier for the{\" \"}\n      <a\n        href=\"http://archive.ics.uci.edu/ml/datasets/Wine+Quality\"\n        target=\"_blank\"\n      >\n        Wine Quality\n      </a>{\" \"}\n      dataset. The basic scaffolding has been provided for you to read the data.\n      Chain together multiple <em>n</em>-dimensional perceptrons to output a\n      single score predicting the wine quality. Find a configuration of\n      perceptrons that results in at least a 95% accuracy.\n    </p>\n    <p>PLACEHOLDER</p>\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/fundamentals/perceptrons/\">Continue to Perceptrons</Link>\n        </li>\n        <li>\n          <Link to=\"/\">Go back to the table of contents</Link>\n        </li>\n      </ul>\n    </div>\n  </Layout>\n);\n"],"sourceRoot":""}